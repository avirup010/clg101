# you need to install cryptography on your device if not previously installed

import sqlite3
from tkinter import *
from tkinter import messagebox, ttk
from cryptography.fernet import Fernet

# Encryption Key Management
def generate_key():
    key = Fernet.generate_key()
    with open("key.key", "wb") as key_file:
        key_file.write(key)

def load_key():
    return open("key.key", "rb").read()

# Database Setup
def create_db():
    with sqlite3.connect("passwords.db") as conn:
        conn.execute('''CREATE TABLE IF NOT EXISTS passwords
                        (website TEXT, username TEXT, password TEXT)''')

# Password Storage
def add_password(website, username, password):
    key = load_key()
    encrypted_password = Fernet(key).encrypt(password.encode())
    with sqlite3.connect("passwords.db") as conn:
        conn.execute("INSERT INTO passwords VALUES (?, ?, ?)", (website, username, encrypted_password))
    messagebox.showinfo("Success", "Password added successfully!")

# Password Retrieval
def get_password(website):
    key = load_key()
    fernet = Fernet(key)
    with sqlite3.connect("passwords.db") as conn:
        cursor = conn.execute("SELECT username, password FROM passwords WHERE website = ?", (website,))
        result = cursor.fetchone()
    return f"Username: {result[0]}\nPassword: {fernet.decrypt(result[1]).decode()}" if result else "No password found."

# GUI Setup
root = Tk()
root.title("Password Manager")
root.geometry("450x400")
root.configure(bg="#F8EDEB")
Label(root, text="Password Manager", bg="#F8EDEB", font=('Helvetica', 20, 'bold')).pack(pady=20)

def add_password_window():
    window = Toplevel(root)
    window.title("Add Password")
    window.geometry("350x250")
    window.configure(bg="#FFFFFF")
    
    frame = Frame(window, bg="#F5D8D4", padx=20, pady=20)
    frame.pack(fill=BOTH, expand=True)
    
    Label(frame, text="Website:", bg="#F5D8D4").pack(pady=5)
    website_entry = Entry(frame)
    website_entry.pack(pady=5, padx=10, fill=X)
    
    Label(frame, text="Username:", bg="#F5D8D4").pack(pady=5)
    username_entry = Entry(frame)
    username_entry.pack(pady=5, padx=10, fill=X)
    
    Label(frame, text="Password:", bg="#F5D8D4").pack(pady=5)
    password_entry = Entry(frame, show="*")
    password_entry.pack(pady=5, padx=10, fill=X)
    
    def save():
        add_password(website_entry.get(), username_entry.get(), password_entry.get())
        website_entry.delete(0, END)
        username_entry.delete(0, END)
        password_entry.delete(0, END)
    
    ttk.Button(frame, text="Save", command=save).pack(pady=10)

def retrieve_password_window():
    window = Toplevel(root)
    window.title("Retrieve Password")
    window.geometry("350x200")
    window.configure(bg="#FFFFFF")
    
    frame = Frame(window, bg="#F5D8D4", padx=20, pady=20)
    frame.pack(fill=BOTH, expand=True)
    
    Label(frame, text="Website:", bg="#F5D8D4").pack(pady=5)
    website_entry = Entry(frame)
    website_entry.pack(pady=5, padx=10, fill=X)
    
    result_label = Label(frame, text="", bg="#F5D8D4", font=('Helvetica', 12))
    result_label.pack(pady=10)
    
    def show():
        result_label.config(text=get_password(website_entry.get()))
    
    ttk.Button(frame, text="Retrieve", command=show).pack(pady=10)

# Main Buttons
button_frame = Frame(root, bg="#F8EDEB")
button_frame.pack(pady=20)

ttk.Button(button_frame, text="Add Password", command=add_password_window).pack(side=LEFT, padx=10)
ttk.Button(button_frame, text="Retrieve Password", command=retrieve_password_window).pack(side=LEFT, padx=10)
ttk.Button(button_frame, text="Exit", command=root.quit).pack(side=LEFT, padx=10)

Label(root, text="Cypher01", bg="#F8EDEB", font=('Helvetica', 14, 'italic')).place(relx=0.9, rely=0.95, anchor='se')

create_db()
root.mainloop()
