# you need to install cryptography on your device if not previously installed

import sqlite3
from tkinter import *
from tkinter import messagebox
from tkinter import ttk
from PIL import Image, ImageTk, ImageFont  # For image handling and font
from cryptography.fernet import Fernet

# Function to generate and save the encryption key
def generate_key():
    key = Fernet.generate_key()
    with open("key.key", "wb") as key_file:
        key_file.write(key)

# Load the encryption key
def load_key():
    return open("key.key", "rb").read()

# Create the database and the table for storing passwords
def create_db():
    conn = sqlite3.connect("passwords.db")
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS passwords
                      (website TEXT, username TEXT, password TEXT)''')
    conn.commit()
    conn.close()

# Function to add a password to the database
def add_password(website, username, password):
    key = load_key()
    fernet = Fernet(key)
    encrypted_password = fernet.encrypt(password.encode())

    conn = sqlite3.connect("passwords.db")
    cursor = conn.cursor()
    cursor.execute("INSERT INTO passwords VALUES (?, ?, ?)", (website, username, encrypted_password))
    conn.commit()
    conn.close()

# Function to retrieve a password from the database
def get_password(website):
    key = load_key()
    fernet = Fernet(key)

    conn = sqlite3.connect("passwords.db")
    cursor = conn.cursor()
    cursor.execute("SELECT username, password FROM passwords WHERE website = ?", (website,))
    result = cursor.fetchone()
    conn.close()

    if result:
        username, encrypted_password = result
        decrypted_password = fernet.decrypt(encrypted_password).decode()
        return f"Username: {username}\nPassword: {decrypted_password}"
    else:
        return "No password found for this website."

# Create a rounded rectangle
def rounded_rectangle(canvas, x1, y1, x2, y2, r, **kwargs):
    points = [x1 + r, y1, x2 - r, y1, x2, y1 + r, x2, y2 - r, x2 - r, y2, x1 + r, y2, x1, y2 - r, x1, y1 + r]
    return canvas.create_polygon(points, **kwargs, smooth=True)

# GUI Setup
root = Tk()
root.title("Password Manager")
root.geometry("450x400")
root.configure(bg="#F8EDEB")  # Soft pastel background color

# Title Label
title_label = Label(root, text="Password Manager", bg="#F8EDEB", font=('Helvetica', 20, 'bold'))
title_label.pack(pady=20)

# Function to Add Password
def add_password_window():
    add_window = Toplevel(root)
    add_window.title("Add Password")
    add_window.geometry("400x300")
    add_window.configure(bg="#FFFFFF")

    # Create a canvas for rounded rectangle
    canvas = Canvas(add_window, bg="#FFFFFF", highlightthickness=0)
    canvas.pack(pady=10, padx=10, fill=BOTH, expand=True)
    rounded_rectangle(canvas, 0, 0, 400, 300, r=20, fill="#F5D8D4")

    frame = Frame(add_window, bg="#F5D8D4", padx=20, pady=20)
    frame.place(relwidth=1, relheight=1)

    # Labels and Entry Fields
    Label(frame, text="Website:", bg="#F5D8D4").pack(pady=5)
    website_entry = Entry(frame)
    website_entry.pack(pady=5, padx=10, fill=X)

    Label(frame, text="Username:", bg="#F5D8D4").pack(pady=5)
    username_entry = Entry(frame)
    username_entry.pack(pady=5, padx=10, fill=X)

    Label(frame, text="Password:", bg="#F5D8D4").pack(pady=5)
    password_entry = Entry(frame, show="*")
    password_entry.pack(pady=5, padx=10, fill=X)

    # Save Button
    def save_password():
        website = website_entry.get()
        username = username_entry.get()
        password = password_entry.get()
        add_password(website, username, password)
        messagebox.showinfo("Success", "Password added successfully!")
        website_entry.delete(0, END)
        username_entry.delete(0, END)
        password_entry.delete(0, END)

    save_button = ttk.Button(frame, text="Save", command=save_password)
    save_button.pack(pady=10)

# Function to Retrieve Password
def retrieve_password_window():
    retrieve_window = Toplevel(root)
    retrieve_window.title("Retrieve Password")
    retrieve_window.geometry("400x250")
    retrieve_window.configure(bg="#FFFFFF")

    # Create a canvas for rounded rectangle
    canvas = Canvas(retrieve_window, bg="#FFFFFF", highlightthickness=0)
    canvas.pack(pady=10, padx=10, fill=BOTH, expand=True)
    rounded_rectangle(canvas, 0, 0, 400, 250, r=20, fill="#F5D8D4")

    frame = Frame(retrieve_window, bg="#F5D8D4", padx=20, pady=20)
    frame.place(relwidth=1, relheight=1)

    Label(frame, text="Website:", bg="#F5D8D4").pack(pady=5)
    website_entry = Entry(frame)
    website_entry.pack(pady=5, padx=10, fill=X)

    result_label = Label(frame, text="", bg="#F5D8D4", font=('Helvetica', 12))
    result_label.pack(pady=10)

    # Retrieve Button
    def show_password():
        website = website_entry.get()
        result = get_password(website)
        result_label.config(text=result)

    retrieve_button = ttk.Button(frame, text="Retrieve", command=show_password)
    retrieve_button.pack(pady=10)

# Main Buttons
button_frame = Frame(root, bg="#F8EDEB")
button_frame.pack(pady=20)

add_button = ttk.Button(button_frame, text="Add Password", command=add_password_window)
add_button.pack(side=LEFT, padx=10)

retrieve_button = ttk.Button(button_frame, text="Retrieve Password", command=retrieve_password_window)
retrieve_button.pack(side=LEFT, padx=10)

exit_button = ttk.Button(button_frame, text="Exit", command=root.quit)
exit_button.pack(side=LEFT, padx=10)

# Custom Label for "Cypher01"
cypher_label = Label(root, text="Cypher01", bg="#F8EDEB", font=('Helvetica', 14, 'italic'))
cypher_label.place(relx=0.9, rely=0.95, anchor='se')  # Bottom right corner

# Create the database
create_db()

# Run the Application
root.mainloop()
